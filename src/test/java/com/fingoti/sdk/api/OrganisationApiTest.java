/*
 * Fingoti API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.fingoti.sdk.api;

import com.fingoti.sdk.ApiException;
import com.fingoti.sdk.models.AddAddressRequest;
import com.fingoti.sdk.models.AddPresetRequest;
import com.fingoti.sdk.models.AddPresetResult;
import com.fingoti.sdk.models.AddRoleRequest;
import com.fingoti.sdk.models.DefaultWithId;
import com.fingoti.sdk.models.InviteUserDto;
import com.fingoti.sdk.models.ModelDefault;
import com.fingoti.sdk.models.NewOrganisationTokenDto;
import com.fingoti.sdk.models.OrganisationAddressResponse;
import com.fingoti.sdk.models.OrganisationPartnerResponse;
import com.fingoti.sdk.models.OrganisationPresetResponse;
import com.fingoti.sdk.models.OrganisationResponse;
import com.fingoti.sdk.models.OrganisationRoleResponse;
import com.fingoti.sdk.models.OrganisationTenantsResponse;
import com.fingoti.sdk.models.OrganisationUserResponse;
import com.fingoti.sdk.models.PatchAddressRequest;
import com.fingoti.sdk.models.PatchOrganisationRequest;
import com.fingoti.sdk.models.PatchOrganisationTokenRequest;
import com.fingoti.sdk.models.PatchPresetRequest;
import com.fingoti.sdk.models.PatchRoleRequest;
import com.fingoti.sdk.models.RegiserOrganisationDto;
import com.fingoti.sdk.models.RegiserTenantDto;
import com.fingoti.sdk.models.RegisterOrganisationResult;
import com.fingoti.sdk.models.TokenSuccessResponse;
import java.util.UUID;
import com.fingoti.sdk.models.UpdateUserRole;
import com.fingoti.sdk.models.UserTokenResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for OrganisationApi
 */
@Disabled
public class OrganisationApiTest {

    private final OrganisationApi api = new OrganisationApi();

    /**
     * Delete an address. This is not recoverable.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrganisationAddressesIdTest() throws ApiException {
        UUID id = null;
        ModelDefault response = api.deleteOrganisationAddressesId(id);
        // TODO: test validations
    }

    /**
     * Delete specified preset.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrganisationPresetsIdTest() throws ApiException {
        UUID id = null;
        ModelDefault response = api.deleteOrganisationPresetsId(id);
        // TODO: test validations
    }

    /**
     * Delete a role. Role must not be assigned to any users. This is not recoverable.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrganisationRolesIdTest() throws ApiException {
        UUID id = null;
        ModelDefault response = api.deleteOrganisationRolesId(id);
        // TODO: test validations
    }

    /**
     * Delete a Token. Token will no longer authenticate API requests. This is not recoverable.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrganisationTokensIdTest() throws ApiException {
        UUID id = null;
        ModelDefault response = api.deleteOrganisationTokensId(id);
        // TODO: test validations
    }

    /**
     * Remove a user from the organisation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteOrganisationUsersIdTest() throws ApiException {
        UUID id = null;
        ModelDefault response = api.deleteOrganisationUsersId(id);
        // TODO: test validations
    }

    /**
     * Get your Fingoti organisaiton information.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganisationTest() throws ApiException {
        OrganisationResponse response = api.getOrganisation();
        // TODO: test validations
    }

    /**
     * Get all addresses.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganisationAddressesTest() throws ApiException {
        Integer pageNumber = null;
        Integer itemsPerPage = null;
        String address = null;
        String postcode = null;
        OrganisationAddressResponse response = api.getOrganisationAddresses(pageNumber, itemsPerPage, address, postcode);
        // TODO: test validations
    }

    /**
     * Get specified address.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganisationAddressesIdTest() throws ApiException {
        UUID id = null;
        OrganisationAddressResponse response = api.getOrganisationAddressesId(id);
        // TODO: test validations
    }

    /**
     * Get partner information.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganisationPartnerTest() throws ApiException {
        OrganisationPartnerResponse response = api.getOrganisationPartner();
        // TODO: test validations
    }

    /**
     * Get all presets.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganisationPresetsTest() throws ApiException {
        Integer pageNumber = null;
        Integer itemsPerPage = null;
        String presetNumber = null;
        String presetName = null;
        OrganisationPresetResponse response = api.getOrganisationPresets(pageNumber, itemsPerPage, presetNumber, presetName);
        // TODO: test validations
    }

    /**
     * Get specified preset.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganisationPresetsIdTest() throws ApiException {
        UUID id = null;
        OrganisationPresetResponse response = api.getOrganisationPresetsId(id);
        // TODO: test validations
    }

    /**
     * Get all roles.
     *
     * 0 &#x3D; None, 1 &#x3D; Read, 2 &#x3D; Write
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganisationRolesTest() throws ApiException {
        Integer pageNumber = null;
        Integer itemsPerPage = null;
        String roleName = null;
        OrganisationRoleResponse response = api.getOrganisationRoles(pageNumber, itemsPerPage, roleName);
        // TODO: test validations
    }

    /**
     * Get specified role.
     *
     * 0 &#x3D; None, 1 &#x3D; Read, 2 &#x3D; Write
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganisationRolesIdTest() throws ApiException {
        UUID id = null;
        OrganisationRoleResponse response = api.getOrganisationRolesId(id);
        // TODO: test validations
    }

    /**
     * Get all tenants.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganisationTenantsTest() throws ApiException {
        Integer pageNumber = null;
        Integer itemsPerPage = null;
        String organisationNumber = null;
        String organisationName = null;
        OrganisationTenantsResponse response = api.getOrganisationTenants(pageNumber, itemsPerPage, organisationNumber, organisationName);
        // TODO: test validations
    }

    /**
     * Get all API tokens.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganisationTokensTest() throws ApiException {
        Integer pageNumber = null;
        Integer itemsPerPage = null;
        String tokenName = null;
        UserTokenResponse response = api.getOrganisationTokens(pageNumber, itemsPerPage, tokenName);
        // TODO: test validations
    }

    /**
     * Get specified token.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganisationTokensIdTest() throws ApiException {
        UUID id = null;
        UserTokenResponse response = api.getOrganisationTokensId(id);
        // TODO: test validations
    }

    /**
     * Get all users.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganisationUsersTest() throws ApiException {
        Integer pageNumber = null;
        Integer itemsPerPage = null;
        String name = null;
        String email = null;
        OrganisationUserResponse response = api.getOrganisationUsers(pageNumber, itemsPerPage, name, email);
        // TODO: test validations
    }

    /**
     * Get specidfied user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganisationUsersIdTest() throws ApiException {
        UUID id = null;
        OrganisationUserResponse response = api.getOrganisationUsersId(id);
        // TODO: test validations
    }

    /**
     * Update your Fingoti organisation.
     *
     * Fields that do not require updating can be omitted
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void patchOrganisationTest() throws ApiException {
        PatchOrganisationRequest patchOrganisationRequest = null;
        ModelDefault response = api.patchOrganisation(patchOrganisationRequest);
        // TODO: test validations
    }

    /**
     * Update organisation address.
     *
     * Fields that do not require updating can be omitted
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void patchOrganisationAddressesIdTest() throws ApiException {
        UUID id = null;
        PatchAddressRequest patchAddressRequest = null;
        ModelDefault response = api.patchOrganisationAddressesId(id, patchAddressRequest);
        // TODO: test validations
    }

    /**
     * Update organisation preset.
     *
     * Fields that do not require updating can be omitted.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void patchOrganisationPresetsIdTest() throws ApiException {
        UUID id = null;
        PatchPresetRequest patchPresetRequest = null;
        ModelDefault response = api.patchOrganisationPresetsId(id, patchPresetRequest);
        // TODO: test validations
    }

    /**
     * Update organisation role.
     *
     * Fields that do not require updating can be omitted. 0 &#x3D; None, 1 &#x3D; Read, 2 &#x3D; Write
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void patchOrganisationRolesIdTest() throws ApiException {
        UUID id = null;
        PatchRoleRequest patchRoleRequest = null;
        ModelDefault response = api.patchOrganisationRolesId(id, patchRoleRequest);
        // TODO: test validations
    }

    /**
     * Update API token.
     *
     * Fields that do not require updating can be omitted. AssignedUsers array must contain all users that are to be assigned to the token
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void patchOrganisationTokensIdTest() throws ApiException {
        UUID id = null;
        PatchOrganisationTokenRequest patchOrganisationTokenRequest = null;
        ModelDefault response = api.patchOrganisationTokensId(id, patchOrganisationTokenRequest);
        // TODO: test validations
    }

    /**
     * Update organisation user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void patchOrganisationUsersIdTest() throws ApiException {
        UUID id = null;
        UpdateUserRole updateUserRole = null;
        ModelDefault response = api.patchOrganisationUsersId(id, updateUserRole);
        // TODO: test validations
    }

    /**
     * Register a new Fingoti organisation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postOrganisationTest() throws ApiException {
        RegiserOrganisationDto regiserOrganisationDto = null;
        ModelDefault response = api.postOrganisation(regiserOrganisationDto);
        // TODO: test validations
    }

    /**
     * Create a new address.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postOrganisationAddressesTest() throws ApiException {
        AddAddressRequest addAddressRequest = null;
        ModelDefault response = api.postOrganisationAddresses(addAddressRequest);
        // TODO: test validations
    }

    /**
     * Create a new preset.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postOrganisationPresetsTest() throws ApiException {
        AddPresetRequest addPresetRequest = null;
        AddPresetResult response = api.postOrganisationPresets(addPresetRequest);
        // TODO: test validations
    }

    /**
     * Create a new role.
     *
     * 0 &#x3D; None, 1 &#x3D; Read, 2 &#x3D; Write
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postOrganisationRolesTest() throws ApiException {
        AddRoleRequest addRoleRequest = null;
        DefaultWithId response = api.postOrganisationRoles(addRoleRequest);
        // TODO: test validations
    }

    /**
     * Create new tenant. This is only available to partner organisations.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postOrganisationTenantsTest() throws ApiException {
        RegiserTenantDto regiserTenantDto = null;
        RegisterOrganisationResult response = api.postOrganisationTenants(regiserTenantDto);
        // TODO: test validations
    }

    /**
     * Generate new API token.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postOrganisationTokensTest() throws ApiException {
        NewOrganisationTokenDto newOrganisationTokenDto = null;
        TokenSuccessResponse response = api.postOrganisationTokens(newOrganisationTokenDto);
        // TODO: test validations
    }

    /**
     * Invite a new user to the organisation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postOrganisationUsersTest() throws ApiException {
        InviteUserDto inviteUserDto = null;
        ModelDefault response = api.postOrganisationUsers(inviteUserDto);
        // TODO: test validations
    }

}
