/*
 * Fingoti API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.fingoti.sdk.api;

import com.fingoti.sdk.ApiException;
import com.fingoti.sdk.models.AddWebhookDto;
import com.fingoti.sdk.models.AddWebhookResult;
import com.fingoti.sdk.models.EngineWebhookResponse;
import com.fingoti.sdk.models.EngineWebhooksResponse;
import com.fingoti.sdk.models.ModelDefault;
import com.fingoti.sdk.models.PatchWebhookRequest;
import java.util.UUID;
import com.fingoti.sdk.models.WebhookLogsResponse;
import com.fingoti.sdk.models.WebhookRetryRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for WebhookApi
 */
@Disabled
public class WebhookApiTest {

    private final WebhookApi api = new WebhookApi();

    /**
     * Delete a Webhook. This is not recoverable.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteWebhookIdTest() throws ApiException {
        UUID id = null;
        ModelDefault response = api.deleteWebhookId(id);
        // TODO: test validations
    }

    /**
     * Get all registered webhooks.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWebhookTest() throws ApiException {
        Integer pageNumber = null;
        Integer itemsPerPage = null;
        String webhookNumber = null;
        String property = null;
        EngineWebhooksResponse response = api.getWebhook(pageNumber, itemsPerPage, webhookNumber, property);
        // TODO: test validations
    }

    /**
     * Get specified webhook.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWebhookIdTest() throws ApiException {
        UUID id = null;
        Integer pageNumber = null;
        Integer itemsPerPage = null;
        List<Integer> status = null;
        EngineWebhookResponse response = api.getWebhookId(id, pageNumber, itemsPerPage, status);
        // TODO: test validations
    }

    /**
     * Get all registered webhooks with call logs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWebhookLogsTest() throws ApiException {
        Integer pageNumber = null;
        Integer itemsPerPage = null;
        List<Integer> status = null;
        String webhookNumber = null;
        WebhookLogsResponse response = api.getWebhookLogs(pageNumber, itemsPerPage, status, webhookNumber);
        // TODO: test validations
    }

    /**
     * Update Fingoti webhook.
     *
     * Fields that do not require updating can be omitted
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void patchWebhookIdTest() throws ApiException {
        UUID id = null;
        PatchWebhookRequest patchWebhookRequest = null;
        ModelDefault response = api.patchWebhookId(id, patchWebhookRequest);
        // TODO: test validations
    }

    /**
     * Register a new webhook.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postWebhookTest() throws ApiException {
        AddWebhookDto addWebhookDto = null;
        AddWebhookResult response = api.postWebhook(addWebhookDto);
        // TODO: test validations
    }

    /**
     * Retry a webhook.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postWebhookRetryTest() throws ApiException {
        WebhookRetryRequest webhookRetryRequest = null;
        ModelDefault response = api.postWebhookRetry(webhookRetryRequest);
        // TODO: test validations
    }

}
