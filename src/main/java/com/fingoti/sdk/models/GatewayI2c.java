/*
 * Fingoti API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.fingoti.sdk.models;

import java.util.Objects;
import java.util.Arrays;
import com.fingoti.sdk.models.I2cSetup;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.fingoti.sdk.JSON;

/**
 * GatewayI2c
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-01-16T16:45:33.786096900Z[Europe/London]")
public class GatewayI2c {
  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private Integer address;

  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  private List<List<Integer>> data = null;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private OffsetDateTime timestamp;

  public static final String SERIALIZED_NAME_SETUP = "setup";
  @SerializedName(SERIALIZED_NAME_SETUP)
  private I2cSetup setup;

  public static final String SERIALIZED_NAME_DETECT = "detect";
  @SerializedName(SERIALIZED_NAME_DETECT)
  private List<Integer> detect = null;

  public GatewayI2c() {
  }

  public GatewayI2c address(Integer address) {
    
    this.address = address;
    return this;
  }

   /**
   * Get address
   * @return address
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getAddress() {
    return address;
  }


  public void setAddress(Integer address) {
    this.address = address;
  }


  public GatewayI2c data(List<List<Integer>> data) {
    
    this.data = data;
    return this;
  }

  public GatewayI2c addDataItem(List<Integer> dataItem) {
    if (this.data == null) {
      this.data = new ArrayList<>();
    }
    this.data.add(dataItem);
    return this;
  }

   /**
   * Get data
   * @return data
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<List<Integer>> getData() {
    return data;
  }


  public void setData(List<List<Integer>> data) {
    this.data = data;
  }


  public GatewayI2c timestamp(OffsetDateTime timestamp) {
    
    this.timestamp = timestamp;
    return this;
  }

   /**
   * Get timestamp
   * @return timestamp
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getTimestamp() {
    return timestamp;
  }


  public void setTimestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
  }


  public GatewayI2c setup(I2cSetup setup) {
    
    this.setup = setup;
    return this;
  }

   /**
   * Get setup
   * @return setup
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public I2cSetup getSetup() {
    return setup;
  }


  public void setSetup(I2cSetup setup) {
    this.setup = setup;
  }


  public GatewayI2c detect(List<Integer> detect) {
    
    this.detect = detect;
    return this;
  }

  public GatewayI2c addDetectItem(Integer detectItem) {
    if (this.detect == null) {
      this.detect = new ArrayList<>();
    }
    this.detect.add(detectItem);
    return this;
  }

   /**
   * Get detect
   * @return detect
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Integer> getDetect() {
    return detect;
  }


  public void setDetect(List<Integer> detect) {
    this.detect = detect;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GatewayI2c gatewayI2c = (GatewayI2c) o;
    return Objects.equals(this.address, gatewayI2c.address) &&
        Objects.equals(this.data, gatewayI2c.data) &&
        Objects.equals(this.timestamp, gatewayI2c.timestamp) &&
        Objects.equals(this.setup, gatewayI2c.setup) &&
        Objects.equals(this.detect, gatewayI2c.detect);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, data, timestamp, setup, detect);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GatewayI2c {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    setup: ").append(toIndentedString(setup)).append("\n");
    sb.append("    detect: ").append(toIndentedString(detect)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address");
    openapiFields.add("data");
    openapiFields.add("timestamp");
    openapiFields.add("setup");
    openapiFields.add("detect");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to GatewayI2c
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!GatewayI2c.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GatewayI2c is not found in the empty JSON string", GatewayI2c.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!GatewayI2c.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GatewayI2c` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("data") != null && !jsonObj.get("data").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `data` to be an array in the JSON string but got `%s`", jsonObj.get("data").toString()));
      }
      // validate the optional field `setup`
      if (jsonObj.get("setup") != null && !jsonObj.get("setup").isJsonNull()) {
        I2cSetup.validateJsonObject(jsonObj.getAsJsonObject("setup"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("detect") != null && !jsonObj.get("detect").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `detect` to be an array in the JSON string but got `%s`", jsonObj.get("detect").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GatewayI2c.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GatewayI2c' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GatewayI2c> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GatewayI2c.class));

       return (TypeAdapter<T>) new TypeAdapter<GatewayI2c>() {
           @Override
           public void write(JsonWriter out, GatewayI2c value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GatewayI2c read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GatewayI2c given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GatewayI2c
  * @throws IOException if the JSON string is invalid with respect to GatewayI2c
  */
  public static GatewayI2c fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GatewayI2c.class);
  }

 /**
  * Convert an instance of GatewayI2c to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

