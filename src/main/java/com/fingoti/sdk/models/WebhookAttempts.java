/*
 * Fingoti API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.fingoti.sdk.models;

import java.util.Objects;
import java.util.Arrays;
import com.fingoti.sdk.models.WebhookHeaders;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.fingoti.sdk.JSON;

/**
 * WebhookAttempts
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-01-16T16:45:33.786096900Z[Europe/London]")
public class WebhookAttempts {
  public static final String SERIALIZED_NAME_ATTEMPT = "attempt";
  @SerializedName(SERIALIZED_NAME_ATTEMPT)
  private Integer attempt;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private OffsetDateTime timestamp;

  public static final String SERIALIZED_NAME_RESPONSE_CODE = "responseCode";
  @SerializedName(SERIALIZED_NAME_RESPONSE_CODE)
  private Integer responseCode;

  public static final String SERIALIZED_NAME_RESPONSE_DESCRIPTION = "responseDescription";
  @SerializedName(SERIALIZED_NAME_RESPONSE_DESCRIPTION)
  private String responseDescription;

  public static final String SERIALIZED_NAME_RESPONSE_HEADERS = "responseHeaders";
  @SerializedName(SERIALIZED_NAME_RESPONSE_HEADERS)
  private List<WebhookHeaders> responseHeaders = null;

  public static final String SERIALIZED_NAME_RESPONSE_BODY = "responseBody";
  @SerializedName(SERIALIZED_NAME_RESPONSE_BODY)
  private String responseBody;

  public WebhookAttempts() {
  }

  public WebhookAttempts attempt(Integer attempt) {
    
    this.attempt = attempt;
    return this;
  }

   /**
   * Get attempt
   * @return attempt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getAttempt() {
    return attempt;
  }


  public void setAttempt(Integer attempt) {
    this.attempt = attempt;
  }


  public WebhookAttempts timestamp(OffsetDateTime timestamp) {
    
    this.timestamp = timestamp;
    return this;
  }

   /**
   * Get timestamp
   * @return timestamp
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getTimestamp() {
    return timestamp;
  }


  public void setTimestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
  }


  public WebhookAttempts responseCode(Integer responseCode) {
    
    this.responseCode = responseCode;
    return this;
  }

   /**
   * Get responseCode
   * @return responseCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getResponseCode() {
    return responseCode;
  }


  public void setResponseCode(Integer responseCode) {
    this.responseCode = responseCode;
  }


  public WebhookAttempts responseDescription(String responseDescription) {
    
    this.responseDescription = responseDescription;
    return this;
  }

   /**
   * Get responseDescription
   * @return responseDescription
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getResponseDescription() {
    return responseDescription;
  }


  public void setResponseDescription(String responseDescription) {
    this.responseDescription = responseDescription;
  }


  public WebhookAttempts responseHeaders(List<WebhookHeaders> responseHeaders) {
    
    this.responseHeaders = responseHeaders;
    return this;
  }

  public WebhookAttempts addResponseHeadersItem(WebhookHeaders responseHeadersItem) {
    if (this.responseHeaders == null) {
      this.responseHeaders = new ArrayList<>();
    }
    this.responseHeaders.add(responseHeadersItem);
    return this;
  }

   /**
   * Get responseHeaders
   * @return responseHeaders
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<WebhookHeaders> getResponseHeaders() {
    return responseHeaders;
  }


  public void setResponseHeaders(List<WebhookHeaders> responseHeaders) {
    this.responseHeaders = responseHeaders;
  }


  public WebhookAttempts responseBody(String responseBody) {
    
    this.responseBody = responseBody;
    return this;
  }

   /**
   * Get responseBody
   * @return responseBody
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getResponseBody() {
    return responseBody;
  }


  public void setResponseBody(String responseBody) {
    this.responseBody = responseBody;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WebhookAttempts webhookAttempts = (WebhookAttempts) o;
    return Objects.equals(this.attempt, webhookAttempts.attempt) &&
        Objects.equals(this.timestamp, webhookAttempts.timestamp) &&
        Objects.equals(this.responseCode, webhookAttempts.responseCode) &&
        Objects.equals(this.responseDescription, webhookAttempts.responseDescription) &&
        Objects.equals(this.responseHeaders, webhookAttempts.responseHeaders) &&
        Objects.equals(this.responseBody, webhookAttempts.responseBody);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(attempt, timestamp, responseCode, responseDescription, responseHeaders, responseBody);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WebhookAttempts {\n");
    sb.append("    attempt: ").append(toIndentedString(attempt)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    responseCode: ").append(toIndentedString(responseCode)).append("\n");
    sb.append("    responseDescription: ").append(toIndentedString(responseDescription)).append("\n");
    sb.append("    responseHeaders: ").append(toIndentedString(responseHeaders)).append("\n");
    sb.append("    responseBody: ").append(toIndentedString(responseBody)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attempt");
    openapiFields.add("timestamp");
    openapiFields.add("responseCode");
    openapiFields.add("responseDescription");
    openapiFields.add("responseHeaders");
    openapiFields.add("responseBody");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to WebhookAttempts
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!WebhookAttempts.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WebhookAttempts is not found in the empty JSON string", WebhookAttempts.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!WebhookAttempts.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WebhookAttempts` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("responseDescription") != null && !jsonObj.get("responseDescription").isJsonNull()) && !jsonObj.get("responseDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `responseDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("responseDescription").toString()));
      }
      if (jsonObj.get("responseHeaders") != null && !jsonObj.get("responseHeaders").isJsonNull()) {
        JsonArray jsonArrayresponseHeaders = jsonObj.getAsJsonArray("responseHeaders");
        if (jsonArrayresponseHeaders != null) {
          // ensure the json data is an array
          if (!jsonObj.get("responseHeaders").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `responseHeaders` to be an array in the JSON string but got `%s`", jsonObj.get("responseHeaders").toString()));
          }

          // validate the optional field `responseHeaders` (array)
          for (int i = 0; i < jsonArrayresponseHeaders.size(); i++) {
            WebhookHeaders.validateJsonObject(jsonArrayresponseHeaders.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("responseBody") != null && !jsonObj.get("responseBody").isJsonNull()) && !jsonObj.get("responseBody").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `responseBody` to be a primitive type in the JSON string but got `%s`", jsonObj.get("responseBody").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WebhookAttempts.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WebhookAttempts' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WebhookAttempts> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WebhookAttempts.class));

       return (TypeAdapter<T>) new TypeAdapter<WebhookAttempts>() {
           @Override
           public void write(JsonWriter out, WebhookAttempts value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WebhookAttempts read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of WebhookAttempts given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of WebhookAttempts
  * @throws IOException if the JSON string is invalid with respect to WebhookAttempts
  */
  public static WebhookAttempts fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WebhookAttempts.class);
  }

 /**
  * Convert an instance of WebhookAttempts to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

