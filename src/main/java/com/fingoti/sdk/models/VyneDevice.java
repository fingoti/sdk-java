/*
 * Fingoti API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.fingoti.sdk.models;

import java.util.Objects;
import java.util.Arrays;
import com.fingoti.sdk.models.DeviceCloud;
import com.fingoti.sdk.models.DeviceLocation;
import com.fingoti.sdk.models.DevicePower;
import com.fingoti.sdk.models.DeviceSession;
import com.fingoti.sdk.models.DeviceSupport;
import com.fingoti.sdk.models.DeviceUptime;
import com.fingoti.sdk.models.DeviceVersion;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.fingoti.sdk.JSON;

/**
 * VyneDevice
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-01-16T16:45:33.786096900Z[Europe/London]")
public class VyneDevice {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_KEY = "key";
  @SerializedName(SERIALIZED_NAME_KEY)
  private String key;

  public static final String SERIALIZED_NAME_SUPPORT = "support";
  @SerializedName(SERIALIZED_NAME_SUPPORT)
  private DeviceSupport support;

  public static final String SERIALIZED_NAME_CLOUD = "cloud";
  @SerializedName(SERIALIZED_NAME_CLOUD)
  private DeviceCloud cloud;

  public static final String SERIALIZED_NAME_UPTIME = "uptime";
  @SerializedName(SERIALIZED_NAME_UPTIME)
  private DeviceUptime uptime;

  public static final String SERIALIZED_NAME_ACTIVITY = "activity";
  @SerializedName(SERIALIZED_NAME_ACTIVITY)
  private Boolean activity;

  public static final String SERIALIZED_NAME_TEMPERATURE = "temperature";
  @SerializedName(SERIALIZED_NAME_TEMPERATURE)
  private Integer temperature;

  public static final String SERIALIZED_NAME_BRIGHTNESS = "brightness";
  @SerializedName(SERIALIZED_NAME_BRIGHTNESS)
  private Integer brightness;

  public static final String SERIALIZED_NAME_POWER = "power";
  @SerializedName(SERIALIZED_NAME_POWER)
  private DevicePower power;

  public static final String SERIALIZED_NAME_SESSION = "session";
  @SerializedName(SERIALIZED_NAME_SESSION)
  private DeviceSession session;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private DeviceVersion version;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private DeviceLocation location;

  public VyneDevice() {
  }

  public VyneDevice name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public VyneDevice key(String key) {
    
    this.key = key;
    return this;
  }

   /**
   * Get key
   * @return key
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getKey() {
    return key;
  }


  public void setKey(String key) {
    this.key = key;
  }


  public VyneDevice support(DeviceSupport support) {
    
    this.support = support;
    return this;
  }

   /**
   * Get support
   * @return support
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public DeviceSupport getSupport() {
    return support;
  }


  public void setSupport(DeviceSupport support) {
    this.support = support;
  }


  public VyneDevice cloud(DeviceCloud cloud) {
    
    this.cloud = cloud;
    return this;
  }

   /**
   * Get cloud
   * @return cloud
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public DeviceCloud getCloud() {
    return cloud;
  }


  public void setCloud(DeviceCloud cloud) {
    this.cloud = cloud;
  }


  public VyneDevice uptime(DeviceUptime uptime) {
    
    this.uptime = uptime;
    return this;
  }

   /**
   * Get uptime
   * @return uptime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public DeviceUptime getUptime() {
    return uptime;
  }


  public void setUptime(DeviceUptime uptime) {
    this.uptime = uptime;
  }


  public VyneDevice activity(Boolean activity) {
    
    this.activity = activity;
    return this;
  }

   /**
   * Get activity
   * @return activity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getActivity() {
    return activity;
  }


  public void setActivity(Boolean activity) {
    this.activity = activity;
  }


  public VyneDevice temperature(Integer temperature) {
    
    this.temperature = temperature;
    return this;
  }

   /**
   * Get temperature
   * @return temperature
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getTemperature() {
    return temperature;
  }


  public void setTemperature(Integer temperature) {
    this.temperature = temperature;
  }


  public VyneDevice brightness(Integer brightness) {
    
    this.brightness = brightness;
    return this;
  }

   /**
   * Get brightness
   * @return brightness
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getBrightness() {
    return brightness;
  }


  public void setBrightness(Integer brightness) {
    this.brightness = brightness;
  }


  public VyneDevice power(DevicePower power) {
    
    this.power = power;
    return this;
  }

   /**
   * Get power
   * @return power
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public DevicePower getPower() {
    return power;
  }


  public void setPower(DevicePower power) {
    this.power = power;
  }


  public VyneDevice session(DeviceSession session) {
    
    this.session = session;
    return this;
  }

   /**
   * Get session
   * @return session
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public DeviceSession getSession() {
    return session;
  }


  public void setSession(DeviceSession session) {
    this.session = session;
  }


  public VyneDevice version(DeviceVersion version) {
    
    this.version = version;
    return this;
  }

   /**
   * Get version
   * @return version
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public DeviceVersion getVersion() {
    return version;
  }


  public void setVersion(DeviceVersion version) {
    this.version = version;
  }


  public VyneDevice location(DeviceLocation location) {
    
    this.location = location;
    return this;
  }

   /**
   * Get location
   * @return location
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public DeviceLocation getLocation() {
    return location;
  }


  public void setLocation(DeviceLocation location) {
    this.location = location;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VyneDevice vyneDevice = (VyneDevice) o;
    return Objects.equals(this.name, vyneDevice.name) &&
        Objects.equals(this.key, vyneDevice.key) &&
        Objects.equals(this.support, vyneDevice.support) &&
        Objects.equals(this.cloud, vyneDevice.cloud) &&
        Objects.equals(this.uptime, vyneDevice.uptime) &&
        Objects.equals(this.activity, vyneDevice.activity) &&
        Objects.equals(this.temperature, vyneDevice.temperature) &&
        Objects.equals(this.brightness, vyneDevice.brightness) &&
        Objects.equals(this.power, vyneDevice.power) &&
        Objects.equals(this.session, vyneDevice.session) &&
        Objects.equals(this.version, vyneDevice.version) &&
        Objects.equals(this.location, vyneDevice.location);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, key, support, cloud, uptime, activity, temperature, brightness, power, session, version, location);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VyneDevice {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    support: ").append(toIndentedString(support)).append("\n");
    sb.append("    cloud: ").append(toIndentedString(cloud)).append("\n");
    sb.append("    uptime: ").append(toIndentedString(uptime)).append("\n");
    sb.append("    activity: ").append(toIndentedString(activity)).append("\n");
    sb.append("    temperature: ").append(toIndentedString(temperature)).append("\n");
    sb.append("    brightness: ").append(toIndentedString(brightness)).append("\n");
    sb.append("    power: ").append(toIndentedString(power)).append("\n");
    sb.append("    session: ").append(toIndentedString(session)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("key");
    openapiFields.add("support");
    openapiFields.add("cloud");
    openapiFields.add("uptime");
    openapiFields.add("activity");
    openapiFields.add("temperature");
    openapiFields.add("brightness");
    openapiFields.add("power");
    openapiFields.add("session");
    openapiFields.add("version");
    openapiFields.add("location");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to VyneDevice
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!VyneDevice.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VyneDevice is not found in the empty JSON string", VyneDevice.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!VyneDevice.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VyneDevice` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("key") != null && !jsonObj.get("key").isJsonNull()) && !jsonObj.get("key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("key").toString()));
      }
      // validate the optional field `support`
      if (jsonObj.get("support") != null && !jsonObj.get("support").isJsonNull()) {
        DeviceSupport.validateJsonObject(jsonObj.getAsJsonObject("support"));
      }
      // validate the optional field `cloud`
      if (jsonObj.get("cloud") != null && !jsonObj.get("cloud").isJsonNull()) {
        DeviceCloud.validateJsonObject(jsonObj.getAsJsonObject("cloud"));
      }
      // validate the optional field `uptime`
      if (jsonObj.get("uptime") != null && !jsonObj.get("uptime").isJsonNull()) {
        DeviceUptime.validateJsonObject(jsonObj.getAsJsonObject("uptime"));
      }
      // validate the optional field `power`
      if (jsonObj.get("power") != null && !jsonObj.get("power").isJsonNull()) {
        DevicePower.validateJsonObject(jsonObj.getAsJsonObject("power"));
      }
      // validate the optional field `version`
      if (jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) {
        DeviceVersion.validateJsonObject(jsonObj.getAsJsonObject("version"));
      }
      // validate the optional field `location`
      if (jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) {
        DeviceLocation.validateJsonObject(jsonObj.getAsJsonObject("location"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VyneDevice.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VyneDevice' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VyneDevice> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VyneDevice.class));

       return (TypeAdapter<T>) new TypeAdapter<VyneDevice>() {
           @Override
           public void write(JsonWriter out, VyneDevice value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VyneDevice read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of VyneDevice given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of VyneDevice
  * @throws IOException if the JSON string is invalid with respect to VyneDevice
  */
  public static VyneDevice fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VyneDevice.class);
  }

 /**
  * Convert an instance of VyneDevice to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

